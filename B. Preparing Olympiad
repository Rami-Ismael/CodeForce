import java.io.*;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {
static Deque<Integer> stack =new LinkedList<>();
static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
static int [] array = new int[15];
static int n,l,r,x,count;
    public static void main(String[] args) throws IOException {
	// write your code here
        //generating a subset
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st= new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        l = Integer.parseInt(st.nextToken());
        r = Integer.parseInt(st.nextToken());
        x = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        for (int i=0;i<n;i++)
            array[i] = Integer.parseInt(st.nextToken());
        subset(0);
        pw.println(count);
        pw.flush();
    }

    private static void subset(int k) {
        if (k==n) {
           int max = Integer.MIN_VALUE;
           int min = Integer.MAX_VALUE;
           int sum =0;
            int size = stack.size();
            for (int i=0;i<size;i++){
                int u= stack.removeFirst();
                max  = Math.max(u,max);
                min = Math.min(u,min);
                sum+=u;
                stack.addLast(u);
            }
            if (sum>=l&&sum<=r&&max-min>=x)
                count++;

        }
        else{
            subset(k+1);
            stack.addFirst(array[k]);
            subset(k+1);
            stack.pop();
        }
    }
}
