    import java.io.*;
    import java.util.*;
     
    public class Main {
     
        public static void main(String[] args) throws IOException {
    	// write your code here
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            PrintWriter pw =new PrintWriter(new OutputStreamWriter(System.out));
            StringTokenizer st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int m= Integer.parseInt(st.nextToken());
            int k = 100001;
            //create a graph
            HashSet<Integer>[] G = new HashSet[k];
            for (int i=0;i<100001;i++)
                G[i]= new HashSet<>();
            for (int i=1;i<100001;i++){
                int v = i*2;
                int j = i-1;
                if (j>=1){
                    G[i].add(j);
                }
                if (v<G.length&&v>=1){
                    G[i].add(v);
                }
            }
            //bfs serach
            Queue<Integer> queue = new LinkedList<>();
            queue.add(n);
            int [] distance = new int[100001];
            Arrays.fill(distance,Integer.MAX_VALUE);
            distance[n] = 0;
            while (!queue.isEmpty()&&queue.peek()!=m){
                int u= queue.poll();
                for (int v:G[u]){
                    if (distance[v]>distance[u]+1){
                        distance[v] = distance[u]+1;
                        queue.add(v);
                    }
                }
            }
     
            pw.println(distance[m]);
            pw.flush();
     
        }
    }
